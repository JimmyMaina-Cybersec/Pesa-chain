name: CI Pipeline for Pesa-chain

on:
  push:
  pull_request:
  schedule:
    - cron: '35 12 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    strategy:
      matrix:
        node-version: [22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  semgrep:
    runs-on: ubuntu-20.04
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: semgrep/semgrep
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Semgrep Scan
        run: semgrep ci

  build-scan-push-backend-image:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/heads/feature/') && !startsWith(github.ref, 'refs/heads/bugfix/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        uses: hoverkraft-tech/compose-action@v2.0.1

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Select Tagging scheme
        id: get_tag
        run: |
          TAG=$(git tag --points-at HEAD)
          if [ -z "$TAG" ]; then
            echo "No tags found in the latest commit. Using commit hash."
            echo "git_tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          else
            echo "Using tag from the latest commit: $TAG"
            echo "git_tag=$TAG" >> $GITHUB_OUTPUT
          fi

      - name: Set env Based on Branch
        run: |
          HEAD=${GITHUB_REF#refs/heads/}
          if [[ "$HEAD" == "develop" || "$HEAD" == "maintenance" ]]; then
            IMAGE_TAG="dev-${{ steps.get_tag.outputs.git_tag }}"
          elif [[ "$HEAD" == release/* || "$HEAD" == "hotfix/*" ]]; then
            IMAGE_TAG="stag-${{ steps.get_tag.outputs.git_tag }}"
          elif [[ "$HEAD" == "master" ]]; then
            IMAGE_TAG="prod-${{ steps.get_tag.outputs.git_tag }}"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and Push Backend Docker Image
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH" == "release/*" || "$BRANCH" == "master" ]]; then
            docker-compose -f docker-compose.yml build --build-arg NODE_ENV=production backend
          else
            docker-compose -f docker-compose.yml build backend
          fi
          docker-compose -f docker-compose.yml push backend

  build-scan-push-blockchain-image:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/heads/feature/') && !startsWith(github.ref, 'refs/heads/bugfix/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: '2.14.2'

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Select Tagging scheme
        id: get_tag
        run: |
          TAG=$(git tag --points-at HEAD)
          if [ -z "$TAG" ]; then
            echo "No tags found in the latest commit. Using commit hash."
            echo "git_tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          else
            echo "Using tag from the latest commit: $TAG"
            echo "git_tag=$TAG" >> $GITHUB_OUTPUT
          fi

      - name: Set env Based on Branch
        run: |
          HEAD=${GITHUB_REF#refs/heads/}
          if [[ "$HEAD" == "develop" || "$HEAD" == "maintenance" ]]; then
            IMAGE_TAG="dev-${{ steps.get_tag.outputs.git_tag }}"
          elif [[ "$HEAD" == release/* ]]; then
            IMAGE_TAG="stag-${{ steps.get_tag.outputs.git_tag }}"
          elif [[ "$HEAD" == "master" ]]; then
            IMAGE_TAG="prod-${{ steps.get_tag.outputs.git_tag }}"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and Push Blockchain Docker Image
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH" == "release/*" || "$BRANCH" == "master" ]]; then
            docker-compose -f docker-compose.yml build --build-arg NODE_ENV=production blockchain
          else
            docker-compose -f docker-compose.yml build blockchain
          fi
          docker-compose -f docker-compose.yml push blockchain

  build-scan-push-web-image:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/heads/feature/') && !startsWith(github.ref, 'refs/heads/bugfix/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: '2.14.2'

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Select Tagging scheme
        id: get_tag
        run: |
          TAG=$(git tag --points-at HEAD)
          if [ -z "$TAG" ]; then
            echo "No tags found in the latest commit. Using commit hash."
            echo "git_tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          else
            echo "Using tag from the latest commit: $TAG"
            echo "git_tag=$TAG" >> $GITHUB_OUTPUT
          fi

      - name: Set env Based on Branch
        run: |
          HEAD=${GITHUB_REF#refs/heads/}
          if [[ "$HEAD" == "develop" || "$HEAD" == "maintenance" ]]; then
            IMAGE_TAG="dev-${{ steps.get_tag.outputs.git_tag }}"
          elif [[ "$HEAD" == release/* ]]; then
            IMAGE_TAG="stag-${{ steps.get_tag.outputs.git_tag }}"
          elif [[ "$HEAD" == "master" ]]; then
            IMAGE_TAG="prod-${{ steps.get_tag.outputs.git_tag }}"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and Push Frontend Docker Image (Web)
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH" == "release/*" || "$BRANCH" == "master" ]]; then
            docker-compose -f docker-compose.yml build --build-arg NODE_ENV=production frontend-web
          else
            docker-compose -f docker-compose.yml build frontend-web
          fi
          docker-compose -f docker-compose.yml push frontend-web

  build-scan-push-mobile-image:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/heads/feature/') && !startsWith(github.ref, 'refs/heads/bugfix/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: '2.14.2'

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Select Tagging scheme
        id: get_tag
        run: |
          TAG=$(git tag --points-at HEAD)
          if [ -z "$TAG" ]; then
            echo "No tags found in the latest commit. Using commit hash."
            echo "git_tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          else
            echo "Using tag from the latest commit: $TAG"
            echo "git_tag=$TAG" >> $GITHUB_OUTPUT
          fi

      - name: Set env Based on Branch
        run: |
          HEAD=${GITHUB_REF#refs/heads/}
          if [[ "$HEAD" == "develop" || "$HEAD" == "maintenance" ]]; then
            IMAGE_TAG="dev-${{ steps.get_tag.outputs.git_tag }}"
          elif [[ "$HEAD" == release/* ]]; then
            IMAGE_TAG="stag-${{ steps.get_tag.outputs.git_tag }}"
          elif [[ "$HEAD" == "master" ]]; then
            IMAGE_TAG="prod-${{ steps.get_tag.outputs.git_tag }}"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and Push Frontend Docker Image (Mobile)
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH" == "release/*" || "$BRANCH" == "master" ]]; then
            docker-compose -f docker-compose.yml build --build-arg NODE_ENV=production frontend-mobile
          else
            docker-compose -f docker-compose.yml build frontend-mobile
          fi
          docker-compose -f docker-compose.yml push frontend-mobile
