name: CD Pipeline for Pesa-chain

on:
  workflow_run:
    workflows: [CI Pipeline for Pesa-chain]
    types:
      - completed

jobs:
  # Development Deployment
  deploy-to-development:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Install Docker Compose
        run: |
          if ! [ -x "$(command -v docker-compose)" ]; then
            echo "Docker Compose not found. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
          docker-compose --version

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Select Tagging Scheme
        id: get_tag
        run: |
          TAG=$(git tag --points-at HEAD)
          if [ -z "$TAG" ]; then
            echo "No tags found in the latest commit. Using commit hash."
            echo "git_tag=${GITHUB_SHA}" >> $GITHUB_ENV
          else
            echo "Using tag from the latest commit: $TAG"
            echo "git_tag=$TAG" >> $GITHUB_ENV
          fi

      - name: Set IMAGE_TAG for Development
        run: |
          echo "IMAGE_TAG=$IMAGE_TAG"
          echo "IMAGE_TAG=dev-${{ env.git_tag }}" >> $GITHUB_ENV

      # Parallel deployment of Docker images for development
      - name: Deploy Pesachain (Dev)
        run: |
          docker compose -f docker-compose.yml pull
          docker compose -f docker-compose.yml up -d

      # Wait for services to start
      - name: Wait for Services to Start
        run: sleep 60

      # Health Checks
      - name: Health Check for Blockchain Service
        run: |
          if ! curl --fail http://localhost:4000/health; then
            echo "Blockchain service health check failed. Investigate the issue."
            exit 1
          fi

      - name: Health Check for Backend Service
        run: |
          if ! curl --fail http://localhost:3000/health; then
            echo "Backend service health check failed. Investigate the issue."
            exit 1
          fi

      - name: Health Check for Web Service
        run: |
          if ! curl --fail http://localhost:8080; then
            echo "Web service health check failed. Investigate the issue."
            exit 1
          fi

      - name: Health Check for Mobile Service
        run: |
          if ! curl --fail http://localhost:8081; then
            echo "Mobile service health check failed. Investigate the issue."
            exit 1
          fi

  # Staging Deployment
  deploy-to-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release/*' && ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Install Docker Compose
        run: |
          if ! [ -x "$(command -v docker-compose)" ]; then
            echo "Docker Compose not found. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
          docker-compose --version

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Select Tagging Scheme
        id: get_tag
        run: |
          TAG=$(git tag --points-at HEAD)
          if [ -z "$TAG" ]; then
            echo "No tags found in the latest commit. Using commit hash."
            echo "git_tag=${GITHUB_SHA}" >> $GITHUB_ENV
          else
            echo "Using tag from the latest commit: $TAG"
            echo "git_tag=$TAG" >> $GITHUB_ENV
          fi

      - name: Set IMAGE_TAG for Staging
        run: |
            echo "IMAGE_TAG=$IMAGE_TAG"
            echo "IMAGE_TAG=stag-${{ env.git_tag }}" >> $GITHUB_ENV

      # Parallel deployment of Docker images for development
      - name: Deploy Pesachain (Stag)
        run: |
          docker compose -f docker-compose.yml pull
          docker compose -f docker-compose.yml up -d

      # Wait for services to start
      - name: Wait for Services to Start
        run: sleep 60

      # Health Checks
      - name: Health Check for Backend Service
        run: |
          if ! curl --fail http://localhost:3000/health; then
            echo "Backend service health check failed. Investigate the issue."
            exit 1
          fi

      - name: Health Check for Blockchain Service
        run: |
          if ! curl --fail http://localhost:4000/health; then
            echo "Blockchain service health check failed. Investigate the issue."
            exit 1
          fi

      - name: Health Check for Web Service
        run: |
          if ! curl --fail http://localhost:8080; then
            echo "Web service health check failed. Investigate the issue."
            exit 1
          fi

      - name: Health Check for Mobile Service
        run: |
          if ! curl --fail http://localhost:8081; then
            echo "Mobile service health check failed. Investigate the issue."
            exit 1
          fi

  # Production Deployment
  deploy-to-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Install Docker Compose
        run: |
          if ! [ -x "$(command -v docker-compose)" ]; then
            echo "Docker Compose not found. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
          docker-compose --version

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Select Tagging Scheme
        id: get_tag
        run: |
          TAG=$(git tag --points-at HEAD)
          if [ -z "$TAG" ]; then
            echo "No tags found in the latest commit. Using commit hash."
            echo "git_tag=${GITHUB_SHA}" >> $GITHUB_ENV
          else
            echo "Using tag from the latest commit: $TAG"
            echo "git_tag=$TAG" >> $GITHUB_ENV
          fi

      - name: Set IMAGE_TAG for Production
        run: |
            echo "IMAGE_TAG=$IMAGE_TAG"
            echo "IMAGE_TAG=dev-${{ env.git_tag }}" >> $GITHUB_ENV

      # Parallel deployment of Docker images for development
      - name: Deploy Pesachain (Prod)
        run: |
          docker compose -f docker-compose.yml pull
          docker compose -f docker-compose.yml up -d

      # Wait for services to start
      - name: Wait for Services to Start
        run: sleep 60

      # Health checks
      - name: Health Check for Backend Service
        run: |
          if ! curl --fail http://localhost:3000/health; then
            echo "Backend service health check failed. Investigate the issue."
            exit 1
          fi

      - name: Health Check for Blockchain Service
        run: |
          if ! curl --fail http://localhost:4000/health; then
            echo "Blockchain service health check failed. Investigate the issue."
            exit 1
          fi

      - name: Health Check for Web Service
        run: |
          if ! curl --fail http://localhost:8080; then
            echo "Web service health check failed. Investigate the issue."
            exit 1
          fi

      - name: Health Check for Mobile Service
        run: |
          if ! curl --fail http://localhost:8081; then
            echo "Mobile service health check failed. Investigate the issue."
            exit 1
          fi
